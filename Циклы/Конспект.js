// Цикл while выполняет блок кода до тех пор, пока условие истинно (true).
// Когда условие становится ложным (false), выполнение цикла прекращается.
let i = 1
while (i <= 5) {
	console.log(i)
	i++ // увеличиваем значение i на 1
}
// 1
// 2
// 3
// 4
// 5
// Условие проверяется сразу, перед выполнением тела цикла.
// Если условие ложное с самого начала, тело цикла не выполнится ни разу.

// Цикл do...while похож на цикл while, но его отличие в том, что условие
// проверяется после выполнения тела цикла. Это означает, что цикл всегда
// выполнится хотя бы один раз, даже если условие ложно.
let k = 1
do {
	console.log(k)
	k++
} while (k <= 5)
// 1
// 2
// 3
// 4
// 5
let l = 6
do {
	console.log(l)
	l++
} while (l <= 5) // ложное
// 6
// Тело цикла выполнится один раз, потому что условие проверяется после выполнения.

// икл for удобен, когда известна точная последовательность
// повторений. Он состоит из трёх частей:
// Инициализация — происходит один раз перед началом цикла.
// Условие — проверяется перед каждой итерацией.
// Шаг — выполняется после каждой итерации (обычно увеличение или уменьшение счетчика).
for (let i = 1; i <= 5; i++) {
	console.log(i)
}
// 1
// 2
// 3
// 4
// 5

// ​​​​let i = 1​​​​ — инициализация, задаём начальное значение переменной ​​​​i​​​​.
// i <= 5 — условие, цикл продолжается, пока оно истинно.
// i++ — шаг, увеличиваем значение i после каждой итерации.

// Циклы могут быть вложены друг в друга, что позволяет,
// например, работать с многомерными массивами или таблицами.
for (let i = 1; i <= 3; i++) {
	for (let j = 1; j <= 3; j++) {
		console.log(`${i} * ${j} = ${i * j}`)
	}
}
// 1 * 1 = 1
// 1 * 2 = 2
// 1 * 3 = 3
// 2 * 1 = 2
// 2 * 2 = 4
// 2 * 3 = 6
// 3 * 1 = 3
// 3 * 2 = 6
// 3 * 3 = 9

// Для досрочного завершения цикла можно использовать операторы:
// break — завершает выполнение цикла полностью.
// ​​​​continue​​​​ — прерывает текущую итерацию и переходит к следующей.
for (let i = 1; i <= 5; i++) {
	if (i === 3) {
		break // цикл прерывается, как только i равно 3
	}
	console.log(i)
} // 1 2

for (let i = 1; i <= 5; i++) {
	if (i === 3) {
		continue // текущая итерация пропускается, и цикл продолжает выполнение
	}
	console.log(i)
} // 1 2 4 5

// Любая часть for может быть пропущена.
let ii = 0 // мы уже имеем объявленную i с присвоенным значением

for (; ii < 3; ii++) {
	// нет необходимости в "начале"
	alert(ii) // 0, 1, 2
}

let ie = 0

for (; ie < 3; ) {
	alert(ie++)
} // Это сделает цикл аналогичным while (i < 3).

// перебор массива с лево на право
const array = ['a', 'b', 'c']
for (let i = array.length; i > 0; i--) {
	console.log([i - 1])
} // c b a

// А можно и вообще убрать всё, получив бесконечный цикл:
// for (;;) {
//   // будет выполняться вечно
// }
// При этом сами точки с запятой ;
// обязательно должны присутствовать, иначе будет ошибка синтаксиса.

// Если не предусмотреть условия для выхода,
// можно создать бесконечный цикл. Пример бесконечного цикла:

// while (true) {
//   console.log("Этот цикл будет продолжаться вечно");
// }

// Чтобы избежать бесконечного цикла, всегда нужно следить за тем,
// чтобы условие выхода из цикла стало ложным на каком-то этапе выполнения.

// Циклы for...in и for...of используются для перебора данных в коллекциях,
// таких как объекты и массивы. Однако у них есть важные различия в том,
// как и для чего они применяются.
// переменную можно назвать как угодно

// Перебор объекта
// Допустим, у нас есть объект user, содержащий информацию о пользователе:
const user = {
	name: 'Alice',
	age: 30,
	city: 'New York',
}

for (let key in user) {
	console.log(key) // выводит ключи: "name", "age", "city"
	console.log(user[key]) // выводит значения: "Alice", 30, "New York"
}
// Здесь переменная key перебирает все ключи объекта user
// (name, age, city), а значение свойства объекта можно получить с помощью user[key].

// Перебор массива
// Хотя for...in можно использовать для перебора массивов, это не рекомендуется,
// так как он работает по индексам, а не по значениям массива:
const arr = [10, 20, 30]

for (let index in arr) {
	console.log(index) // выводит индексы: 0, 1, 2
	console.log(arr[index]) // выводит значения: 10, 20, 30
}

// Используется для перебора ключей объекта.
// Может перебирать индексы массива, но это не лучший выбор для массивов.
// Перебирает также наследуемые свойства объекта, что может
// привести к нежелательным результатам.

// Цикл for...of используется для перебора значений и применяется
// к итерируемым объектам, таким как массивы, строки, Map, Set и т.д.
// Он не работает с объектами, если только объект не является итерируемым.

// Перебор массива
// Используем for...of, чтобы вывести все элементы массива:
const arrm = [10, 20, 30]

for (let value of arrm) {
	console.log(value) // выводит: 10, 20, 30
}
// Здесь переменная value перебирает значения массива (10, 20, 30), а не индексы.

// Перебор строки
// Цикл for...of также можно использовать для перебора строк:
const str = 'Hello'

for (let char of str) {
	console.log(char) // выводит: H, e, l, l, o
}
// Перебирает значения, а не ключи или индексы.

let result = ''
const length = 7

for (let i = 1; i < length; i++) {
	for (let j = 0; j < i; j++) {
		result += '*'
	}

	result += '\n'
}

console.log(result)
// *
// **
// ***
// ****
// *****
// ******
