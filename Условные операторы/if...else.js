/**
 * Условные операторы позволяют вашему коду принимать решения 
 * на основе различных условий. Самым распространённым оператором 
 * для таких целей является оператор if...else. Он проверяет условие 
 * и выполняет блок кода в зависимости от того, истинно ли это условие 
 * (возвращает true) или ложно (возвращает false).
 */

let temperature = 25;

if (temperature > 30) {
  console.log("Очень жарко!");
} else if (temperature >= 20 && temperature <= 30) {
  console.log("Тепло"); // Этот блок выполнится
} else {
  console.log("Холодно");
}

/**
 * Операторы if могут быть вложенными, то есть один оператор 
 * if может находиться внутри другого. Это полезно, когда 
 * нужно проверить несколько условий одно за другим.
 */

let age = 20;
let hasID = true;

if (age >= 18) {
  if (hasID) {
    console.log("Вход разрешён!"); // Проверка прошла
  } else {
    console.log("Вам нужен документ, чтобы войти.");
  }
} else {
  console.log("Вам нет 18 лет.");
}

/**
 * Условия вычисляются как логические значения. 
 * Это значит, что любое выражение, возвращающее истинное (​​​​true​​​​) 
 * или ложное (​​​​false​​​​) значение, может быть использовано как 
 * условие в ​​​​if​​​​. Смотрите главу с преобразованием типов.
 * 
 * Ложные значения: В JavaScript следующие значения считаются ложными 
 * и приведут к невыполнению блока if:
 * 
 * false
 * 0
 * "" (пустая строка)
 * null
 * undefaned
 * NaN (не число)
 */

// if использование в функциях
const sumPositiveNumbers = (a, b) => {
  if (typeof a !== "number" || typeof b !== "number") {
      return `One of the arguments is not a number`
  }
  if (a <= 0 || b <= 0) {
      return `Numbers are not positive`
  }
  return a + b
}

console.log(sumPositiveNumbers(5, 5)) // 1-("a", true) 2-(-10, 5)