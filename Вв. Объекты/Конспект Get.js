// В JavaScript есть два основных способа копирования объектов: поверхностное и глубокое.

// 1. Поверхностное копирование (Shallow Copy)
// При поверхностном копировании создаётся новый объект, но вложенные объекты (или массивы) остаются ссылками на те же объекты, что и в исходном объекте.
// Использование Object.assign:

let obj1 = { a: 1, b: { c: 2 } };
let obj2 = Object.assign({}, obj1); // Поверхностное копирование
obj2.b.c = 3; // Изменение вложенного объекта
console.log(obj1.b.c); // Выведет 3 (изменение отразилось в obj1)
console.log(obj2.b.c); // Выведет 3
obj2.a = 4; // изменение примитива в скопированном объекте
console.log(obj1.a); // Выведет 1 (изменение отразилось в obj1)
console.log(obj2.a); // Выведет 4
// 2. Глубокое копирование (клоннирование)
// Глубокое копирование создаёт новый объект,
// включая рекурсивное копирование всех вложенных объектов.

let obj11 = { a: 1, b: { c: 2 } };
let obj2 = JSON.parse(JSON.stringify(obj11)); // Глубокое копирование

obj2.b.c = 3; // Изменение вложенного объекта

console.log(obj11.b.c); // Выведет 2 (изменение не отразилось в obj11)
console.log(obj2.b.c); // Выведет 3

// Если требуется более сложное глубокое копирование, можно использовать библиотеку lodash с функцией cloneDeep:
const _ = require('lodash');
let obj111 = { a: 1, b: { c: 2 } };
let obj2 = _.cloneDeep(obj111); // Глубокое копирование

obj2.b.c = 3; // Изменение вложенного объекта

console.log(obj111.b.c); // Выведет 2 (изменение не отразилось в obj111)
console.log(obj2.b.c); // Выведет 3
// Функция cloneDeep делает полное глубокое копирование, включая сложные структуры.
